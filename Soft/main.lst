CCS PCH C Compiler, Version 4.104, 5967               21-Jan-22 03:05

               Filename: D:\Cosas\Colegio\2022\Ivo\repo\drying_and_desinfection_system\Soft\main.lst

               ROM used: 794 bytes (1%)
                         Largest free fragment is 64738
               RAM used: 23 (1%) at main() level
                         31 (1%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
00000:  GOTO   02B0
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  00,0E
0003C:  MOVFF  01,0F
00040:  MOVFF  02,10
00044:  MOVFF  03,11
00048:  BTFSS  F9D.1
0004A:  GOTO   0054
0004E:  BTFSC  F9E.1
00050:  GOTO   0096
00054:  MOVFF  0E,00
00058:  MOVFF  0F,01
0005C:  MOVFF  10,02
00060:  MOVFF  11,03
00064:  MOVFF  0C,FE9
00068:  MOVFF  07,FEA
0006C:  BSF    07.7
0006E:  MOVFF  08,FE1
00072:  MOVFF  09,FE2
00076:  MOVFF  0A,FD9
0007A:  MOVFF  0B,FDA
0007E:  MOVFF  12,FF3
00082:  MOVFF  13,FF4
00086:  MOVFF  14,FFA
0008A:  MOVF   04,W
0008C:  MOVFF  06,FE0
00090:  MOVFF  05,FD8
00094:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F4620.h> 
.................... //////// Standard Header file for the PIC18F4620 device //////////////// 
.................... #device PIC18F4620 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV21                   //Brownout reset at 2.1V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES MCLR                     //Master Clear pin enabled 
....................  
.................... #use delay(clock=8000000) 
00222:  CLRF   FEA
00224:  MOVLW  19
00226:  MOVWF  FE9
00228:  MOVF   FEF,W
0022A:  BZ    0246
0022C:  MOVLW  02
0022E:  MOVWF  01
00230:  CLRF   00
00232:  DECFSZ 00,F
00234:  BRA    0232
00236:  DECFSZ 01,F
00238:  BRA    0230
0023A:  MOVLW  97
0023C:  MOVWF  00
0023E:  DECFSZ 00,F
00240:  BRA    023E
00242:  DECFSZ FEF,F
00244:  BRA    022C
00246:  GOTO   0274 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... /*=================================================== 
....................                      DEFINITIONS 
.................... -----------------------------------------------------*/ 
....................  
.................... #define ADCMAX 255 
.................... #define LED1M PIN_B1 
.................... #define LED3M PIN_B2 
.................... #define LED5M PIN_B3 
.................... #define UVBUTTON PIN_A2 
.................... #define UVONFLAG PIN_D0 
.................... #define UVONRELAY PIN_A6 
.................... #define HEATERBUTTON PIN_A3 
.................... #define HEATERONFLAG PIN_D1 
.................... #define HEATERONRELAY PIN_C0 
.................... #define STARTBUTTON PIN_A5 
.................... #define STARTEDFLAG PIN_D2 
.................... #define DHTDATA PIN_A1 
.................... #define DHTLED PIN_D3 
.................... #define BUZZER PIN_D4 
....................  
.................... /*=================================================== 
....................                       FUNCTIONS 
.................... -----------------------------------------------------*/ 
....................  
....................  
....................  
.................... //!#include <stdlib.h> 
.................... //!#include <stdio.h> 
....................  
....................  
.................... //!unsigned int8 adc_value(){ 
.................... //!   unsigned int8 value; 
.................... //!   value = read_adc(ADC_START_AND_READ); 
.................... //!   return value; 
.................... //!} 
....................  
.................... void leds(int1 a, int1 b, int1 c){ 
....................    output_bit(LED1M,a); 
*
00126:  MOVF   18,F
00128:  BNZ   012E
0012A:  BCF    F8A.1
0012C:  BRA    0130
0012E:  BSF    F8A.1
00130:  BCF    F93.1
....................    output_bit(LED3M,b); 
00132:  MOVF   19,F
00134:  BNZ   013A
00136:  BCF    F8A.2
00138:  BRA    013C
0013A:  BSF    F8A.2
0013C:  BCF    F93.2
....................    output_bit(LED5M,c); 
0013E:  MOVF   1A,F
00140:  BNZ   0146
00142:  BCF    F8A.3
00144:  BRA    0148
00146:  BSF    F8A.3
00148:  BCF    F93.3
.................... } 
0014A:  RETLW  00
.................... unsigned int8 read_data(int8 value) 
.................... { 
....................    //int8 value = read_adc(); 
....................     
.................... //!   unsigned int8 time_leds_value; 
.................... //!   if (2 < value <= (ADCMAX/3)) time_leds_value = 1; 
.................... //!   else if ((ADCMAX/3) < value <= (ADCMAX/2)) time_leds_value = 2; 
.................... //!   else if ((ADCMAX/2) < value < ADCMAX) time_leds_value = 3; 
.................... //!   else return 0; 
.................... //!   return time_leds_value; 
....................    if (value <= (ADCMAX/3)) return 1; 
*
00100:  MOVF   18,W
00102:  SUBLW  55
00104:  BNC   010C
00106:  MOVLW  01
00108:  MOVWF  01
0010A:  BRA    0122
....................    if (value <= (ADCMAX/2)) return 2; 
0010C:  MOVF   18,W
0010E:  SUBLW  7F
00110:  BNC   0118
00112:  MOVLW  02
00114:  MOVWF  01
00116:  BRA    0122
....................    if (value <= ADCMAX) return 3; 
00118:  MOVLW  03
0011A:  MOVWF  01
0011C:  BRA    0122
....................    return 0; 
0011E:  MOVLW  00
00120:  MOVWF  01
.................... } 
00122:  GOTO   02EC (RETURN)
....................  
.................... void time_leds(unsigned int8 time_leds_value){ 
....................    switch(time_leds_value){ 
*
0014C:  MOVF   17,W
0014E:  ADDLW  FC
00150:  BC    0186
00152:  ADDLW  04
00154:  GOTO   018A
....................          case 0: 
....................             leds(0,0,0); 
00158:  CLRF   18
0015A:  CLRF   19
0015C:  CLRF   1A
0015E:  RCALL  0126
....................             break; 
00160:  BRA    0186
....................              
....................          case 1: 
....................             leds(1,0,0); 
00162:  MOVLW  01
00164:  MOVWF  18
00166:  CLRF   19
00168:  CLRF   1A
0016A:  RCALL  0126
....................             break; 
0016C:  BRA    0186
....................           
....................          case 2: 
....................             leds(1,1,0); 
0016E:  MOVLW  01
00170:  MOVWF  18
00172:  MOVWF  19
00174:  CLRF   1A
00176:  RCALL  0126
....................             break; 
00178:  BRA    0186
....................           
....................          case 3: 
....................             leds(1,1,1); 
0017A:  MOVLW  01
0017C:  MOVWF  18
0017E:  MOVWF  19
00180:  MOVWF  1A
00182:  RCALL  0126
....................             break; 
00184:  BRA    0186
....................    } 
.................... } 
00186:  GOTO   02F6 (RETURN)
....................  
.................... int1 confirm_pressed(unsigned int16 button){ 
....................   if(input(button) == 1){ 
*
0024A:  MOVFF  17,19
0024E:  MOVLW  01
00250:  MOVWF  1A
00252:  MOVLW  0F
00254:  MOVWF  1C
00256:  MOVLW  92
00258:  MOVWF  1B
0025A:  RCALL  01B6
0025C:  MOVFF  17,19
00260:  MOVLW  0F
00262:  MOVWF  1B
00264:  MOVLW  80
00266:  MOVWF  1A
00268:  RCALL  01F4
0026A:  BTFSS  01.0
0026C:  BRA    02A8
....................       delay_ms(10); 
0026E:  MOVLW  0A
00270:  MOVWF  19
00272:  BRA    0222
....................       if(input(button)== 0) return 1; 
00274:  MOVFF  17,19
00278:  MOVLW  01
0027A:  MOVWF  1A
0027C:  MOVLW  0F
0027E:  MOVWF  1C
00280:  MOVLW  92
00282:  MOVWF  1B
00284:  RCALL  01B6
00286:  MOVFF  17,19
0028A:  MOVLW  0F
0028C:  MOVWF  1B
0028E:  MOVLW  80
00290:  MOVWF  1A
00292:  RCALL  01F4
00294:  BTFSC  01.0
00296:  BRA    02A0
00298:  MOVLW  01
0029A:  MOVWF  01
0029C:  BRA    02AE
....................       else return 0; 
0029E:  BRA    02A6
002A0:  MOVLW  00
002A2:  MOVWF  01
002A4:  BRA    02AE
....................    } 
....................    else return 0; 
002A6:  BRA    02AE
002A8:  MOVLW  00
002AA:  MOVWF  01
002AC:  BRA    02AE
.................... } 
002AE:  RETLW  00
....................  
.................... //!#int_TIMER0 
.................... //!void  TIMER0_isr(void){ 
.................... //!    
.................... //!} 
.................... //! 
.................... //!#int_EXT 
.................... //!void  EXT_isr(void) 
.................... //!{ 
.................... //!}   
.................... void init() 
.................... { 
....................    setup_adc_ports(AN0|VSS_VDD); 
*
0009C:  MOVF   FC1,W
0009E:  ANDLW  C0
000A0:  IORLW  0E
000A2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2|ADC_TAD_MUL_0); 
000A4:  MOVF   FC0,W
000A6:  ANDLW  C0
000A8:  MOVWF  FC0
000AA:  BCF    FC0.7
000AC:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
000AE:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
000B0:  BCF    FC6.5
000B2:  BCF    F94.5
000B4:  BSF    F94.4
000B6:  BCF    F94.3
000B8:  MOVLW  01
000BA:  MOVWF  FC6
000BC:  MOVLW  00
000BE:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
000C0:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
000C2:  MOVLW  80
000C4:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
000C6:  CLRF   FCD
....................    setup_timer_2(T2_DIV_BY_1,199,1); 
000C8:  MOVLW  00
000CA:  IORLW  04
000CC:  MOVWF  FCA
000CE:  MOVLW  C7
000D0:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
000D2:  CLRF   FB1
....................    setup_comparator(NC_NC_NC_NC); 
000D4:  MOVLW  07
000D6:  MOVWF  FB4
000D8:  MOVF   F92,W
000DA:  MOVWF  F92
000DC:  MOVLW  06
000DE:  MOVWF  00
000E0:  DECFSZ 00,F
000E2:  BRA    00E0
000E4:  NOP   
000E6:  MOVF   FB4,W
000E8:  BCF    FA1.6
....................    setup_vref(FALSE); 
000EA:  CLRF   FB5
....................    enable_interrupts(INT_TIMER2); 
000EC:  BSF    F9D.1
....................    enable_interrupts(GLOBAL); 
000EE:  MOVLW  C0
000F0:  IORWF  FF2,F
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC|OSC_31250|OSC_PLL_OFF); 
000F2:  MOVLW  72
000F4:  MOVWF  FD3
000F6:  MOVLW  80
000F8:  MOVWF  F9B
000FA:  MOVF   FD3,W
....................    //read_adc(ADC_START_AND_READ); 
.................... } 
000FC:  GOTO   02DC (RETURN)
....................  
.................... #int_TIMER2 
.................... void  TIMER2_isr(void)  
.................... { 
....................  
.................... } 
....................  
....................  
....................  
*
00096:  BCF    F9E.1
00098:  GOTO   0054
.................... void main() 
.................... { 
*
002B0:  CLRF   FF8
002B2:  BCF    FD0.7
002B4:  BSF    07.7
002B6:  CLRF   FEA
002B8:  CLRF   FE9
002BA:  MOVLW  70
002BC:  MOVWF  FD3
002BE:  MOVF   FD3,W
002C0:  BCF    FB8.3
002C2:  MOVLW  0C
002C4:  MOVWF  FAF
002C6:  MOVLW  A2
002C8:  MOVWF  FAC
002CA:  MOVLW  90
002CC:  MOVWF  FAB
002CE:  MOVF   FC1,W
002D0:  ANDLW  C0
002D2:  IORLW  0F
002D4:  MOVWF  FC1
002D6:  MOVLW  07
002D8:  MOVWF  FB4
....................    init(); 
002DA:  BRA    009C
....................       while(true){ 
....................        
....................          //Time selection stage 
....................          unsigned int8 adc_lecture = read_data(read_adc()); 
002DC:  BSF    FC2.1
002DE:  BTFSC  FC2.1
002E0:  BRA    02DE
002E2:  MOVFF  FC4,17
002E6:  MOVFF  FC4,18
002EA:  BRA    0100
002EC:  MOVFF  01,16
....................          time_leds(adc_lecture); 
002F0:  MOVFF  16,17
002F4:  BRA    014C
....................           
....................          //Function selection stage 
....................          if(confirm_pressed(UVBUTTON)) output_high(UVONFLAG); 
002F6:  MOVLW  7C
002F8:  MOVWF  18
002FA:  MOVLW  02
002FC:  MOVWF  17
002FE:  RCALL  024A
00300:  MOVF   01,F
00302:  BZ    0308
00304:  BCF    F95.0
00306:  BSF    F8C.0
....................          if(confirm_pressed(HEATERBUTTON)) output_high(HEATERONFLAG); 
00308:  MOVLW  7C
0030A:  MOVWF  18
0030C:  MOVLW  03
0030E:  MOVWF  17
00310:  RCALL  024A
00312:  MOVF   01,F
00314:  BZ    031A
00316:  BCF    F95.1
00318:  BSF    F8C.1
....................          //while(!confirm_pressed(STARTBUTTON)) blinkLed();             for the future... 
....................       } 
0031A:  BRA    02DC
.................... } 
0031C:  SLEEP 

Configuration Fuses:
   Word  1: C800   IESO INTRC_IO FCMEN
   Word  2: 0E19   NOBROWNOUT WDT128 NOWDT BORV21 NOPUT
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
